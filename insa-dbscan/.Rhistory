formatRound(1:7, 2)
datatable(centres) %>%
formatRound(2:8, 2)
library(FactoMineR)
acp = PCA(songs_num, scale.unit = FALSE, graph = FALSE)
acp = PCA(songs_num %>%
mutate(classe = res$cluster), scale.unit = FALSE, quali.sup = 8)
acp$ind$coord
ggplot2(acp$ind$coord %>% mutate(classe = res$cluster), aes(Dim.1, Dim.2, color = classe)) +
geom_point() +
theme_minimal()
ggplot(acp$ind$coord %>% mutate(classe = res$cluster), aes(Dim.1, Dim.2, color = classe)) +
geom_point() +
theme_minimal()
ggplot(tibble(acp$ind$coord) %>% mutate(classe = res$cluster), aes(Dim.1, Dim.2, color = classe)) +
geom_point() +
theme_minimal()
tibble(acp$ind$coord)
type(acp$ind$coord)
class(acp$ind$coord)
tibble(acp$ind$coord)
tibble(data.frame(acp$ind$coord))
acp_ind = tibble(data.frame(acp$ind$coord)) %>%
mutate(classe = res$cluster)
ggplot(acp_ind, aes(Dim.1, Dim.2, color = classe)) +
geom_point() +
theme_minimal()
acp_ind = tibble(data.frame(acp$ind$coord)) %>%
mutate(classe = res$cluster)
ggplot(acp_ind, aes(Dim.1, Dim.2, color = factor(classe))) +
geom_point() +
theme_minimal()
tibble(data.frame(acp$ind$coord))
acp$var$contrib
round(acp$var$contrib)
round(acp$var$cos2)
round(acp$var$cos2, 2)
round(acp$var$coord, 2)
setwd("~/Documents/GitHub/cours-2021-2022/insa-dbscan")
setwd("~/Documents/GitHub/cours-2021-2022/insa-dbscan")
songs = read_csv("spotify-2017songs.csv")
songs_num = songs %>%
select(acousticness, danceability, energy, instrumentalness, liveness, speechiness, valence)
songs = read_csv("spotify-2017songs.csv")
songs_num = songs %>%
select(acousticness, danceability, energy,
instrumentalness, liveness, speechiness, valence)
d = dist(songs_num)
m = as.matrix(d)
m_tri = apply(m, 2, sort)
v = m_tri[15,]
df = tibble(n = 1:2017, kdist = sort(v, decreasing = TRUE)) %>%
mutate(diff = c(NA, -diff(kdist)))
df = tibble(n = 1:2017, kdist = sort(v, decreasing = TRUE)) %>%
mutate(diff = c(NA, -diff(kdist)))
df
coeff = 50
ggplot(df) +
geom_vline(xintercept = c(170, 247), alpha = 0.25, lty = 2) +
geom_hline(yintercept = df$kdist[c(170, 247)], alpha = 0.25, lty = 2) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal()
df[10:100]
df[10:100,]
df %>% filter(diff > 0.005)
ggplot(df) +
geom_vline(xintercept = c(59, 63, 170, 247), alpha = 0.25, lty = 2) +
geom_hline(yintercept = df$kdist[c(59, 63, 170, 247)], alpha = 0.25, lty = 2) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal()
ggplot(df) +
geom_vline(xintercept = c(59, 63, 170, 247), alpha = 0.25, lty = 2) +
geom_hline(yintercept = df$kdist[c(59, 63, 170, 247)], alpha = 0.25, lty = 2) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal() +
xlim(0, 500)
ggplot(df) +
geom_vline(xintercept = c(63, 170, 247), alpha = 0.25, lty = 2) +
geom_hline(yintercept = df$kdist[c(63, 170, 247)], alpha = 0.25, lty = 2) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal() +
xlim(0, 500)
df$kdist[c(63, 170, 247)]
library(dbscan)
res = dbscan(songs_num, eps = .343, minPts = 14)
res
res = dbscan(songs_num, eps = .40539, minPts = 14)
res
res = dbscan(songs_num, eps = .405, minPts = 14)
res
res = dbscan(songs_num, eps = .405, minPts = 42)
res
res = dbscan(songs_num, eps = .405, minPts = 58)
res
res = dbscan(songs_num, eps = .405, minPts = 42)
res = dbscan(songs_num, eps = .32, minPts = 42)
res
prcomp(songs_num)
princomp(songs_num)
pca = princomp(songs_num)
plot(pca)
plot(pca$loadings)
pca$scores
plot(pca$score)
ggplot(pca$score %>% mutate(classe = res$cluster),
aes(Comp.1, Comp.2, color = factor(classe))) +
geom_point() +
theme_minimal()
ggplot(tibble(pca$score) %>% mutate(classe = res$cluster),
aes(Comp.1, Comp.2, color = factor(classe))) +
geom_point() +
theme_minimal()
tibble(pca$score)
ggplot(data.frame(pca$score) %>% mutate(classe = res$cluster),
aes(Comp.1, Comp.2, color = factor(classe))) +
geom_point() +
theme_minimal()
ggplot(data.frame(pca$score) %>% mutate(classe = res$cluster),
aes(Comp.1, Comp.2, color = factor(classe))) +
geom_point(size = 2) +
theme_minimal()
library(nbclust)
library(NbClust)
install.packages("NbClust")
install.packages("NbClust")
km = kmeans(songs_num, 4)
ggplot(data.frame(pca$score) %>% mutate(classe = km$cluster),
aes(Comp.1, Comp.2, color = factor(classe))) +
geom_point(size = 2) +
theme_minimal()
km = kmeans(songs_num, 3)
ggplot(data.frame(pca$score) %>% mutate(classe = km$cluster),
aes(Comp.1, Comp.2, color = factor(classe))) +
geom_point(size = 2) +
theme_minimal()
km$centers
round(km$centers, é)
round(km$centers, 2)
km = kmeans(songs_num, 4)
ggplot(data.frame(pca$score) %>% mutate(classe = km$cluster),
aes(Comp.1, Comp.2, color = factor(classe))) +
geom_point(size = 2) +
theme_minimal()
round(km$centers, 2)
names(songs)
songs_num2 = songs %>%
select(acousticness, danceability, energy,
instrumentalness, liveness, speechiness, valence,
duration_ms, tempo)
songs_num2 = songs %>%
select(acousticness, danceability, energy,
instrumentalness, liveness, speechiness, valence,
duration_ms, tempo) %>%
mutate_all(scale)
d = dist(songs_num2)
m = as.matrix(d)
m_tri = apply(m, 2, sort)
v = m_tri[15,]
df = tibble(n = 1:2017, kdist = sort(v, decreasing = TRUE)) %>%
mutate(diff = c(NA, -diff(kdist)))
coeff = 50
ggplot(df) +
geom_vline(xintercept = c(63, 170, 247), alpha = 0.25, lty = 2) +
geom_hline(yintercept = df$kdist[c(63, 170, 247)], alpha = 0.25, lty = 2) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal() +
xlim(0, 500)
coeff = 5
ggplot(df) +
geom_vline(xintercept = c(63, 170, 247), alpha = 0.25, lty = 2) +
geom_hline(yintercept = df$kdist[c(63, 170, 247)], alpha = 0.25, lty = 2) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal() +
xlim(0, 500)
coeff = 5
ggplot(df) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal() +
xlim(0, 500)
df %>% filter(diff > 0.25)
res = dbscan(songs_num, eps = 3.96, minPts = 14)
res
res = dbscan(songs_num, eps = 3.96, minPts = 42)
res = dbscan(songs_num2, eps = 3.96, minPts = 14)
res
res = dbscan(songs_num2, eps = 3.96, minPts = 42)
res
res = dbscan(songs_num2, eps = 3, minPts = 42)
res
res = dbscan(songs_num2, eps = 2, minPts = 42)
res
res = dbscan(songs_num2, eps = 1, minPts = 42)
res
res = dbscan(songs_num2, eps = 1.5, minPts = 42)
res
res = dbscan(songs_num2, eps = 1.75, minPts = 42)
res
res = dbscan(songs_num2, eps = 2.5, minPts = 42)
res
res
res = dbscan(songs_num2, eps = 1, minPts = 14)
res
res = dbscan(songs_num2, eps = 1.5, minPts = 14)
res
res = dbscan(songs_num2, eps = 1.25, minPts = 14)
res
res = dbscan(songs_num2, eps = 1.75, minPts = 14)
res
res = dbscan(songs_num2, eps = 1.7, minPts = 14)
res
res = dbscan(songs_num2, eps = 1.4, minPts = 14)
res
res = dbscan(songs_num2, eps = 1.4, minPts = 10)
res
res = dbscan(songs_num2, eps = 1.4, minPts = 14)
res
res = dbscan(songs_num2, eps = 1.3, minPts = 14)
res
res = dbscan(songs_num2, eps = 1.45, minPts = 14)
res
pca = princomp(songs_num)
plot(pca)
ggplot(data.frame(pca$score) %>% mutate(classe = res$cluster),
aes(Comp.1, Comp.2, color = factor(classe))) +
geom_point(size = 2) +
theme_minimal()
pca = princomp(songs_num2)
plot(pca)
ggplot(data.frame(pca$score) %>% mutate(classe = res$cluster),
aes(Comp.1, Comp.2, color = factor(classe))) +
geom_point(size = 2) +
theme_minimal()
PCA(songs_num2)
PCA(songs_num)
PCA(songs_num, scale.unit = FALSE)
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
songs = read_csv("spotify-2017songs.csv")
songs_num = songs %>%
select(acousticness, danceability, energy, instrumentalness, liveness, speechiness, valence)
d = dist(songs_num)
songs = read_csv("spotify-2017songs.csv")
songs_num = songs %>%
select(acousticness, danceability, energy, instrumentalness,
liveness, speechiness, valence)
d = dist(songs_num)
m = as.matrix(d)
m_tri = apply(m, 2, sort)
v = m_tri[15,]
df = tibble(n = 1:2017, kdist = sort(v, decreasing = TRUE)) %>%
mutate(diff = c(NA, -diff(kdist)))
coeff = 50
ggplot(df) +
geom_vline(xintercept = c(170, 247), alpha = 0.25, lty = 2) +
geom_hline(yintercept = df$kdist[c(170, 247)], alpha = 0.25, lty = 2) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal()
df %>% filter(diff > 0.005)
ggplot(df) +
geom_vline(xintercept = c(63, 170, 247), alpha = 0.25, lty = 2) +
geom_hline(yintercept = df$kdist[c(63, 170, 247)], alpha = 0.25, lty = 2) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal()
ggplot(df) +
geom_vline(xintercept = c(65, 170, 247), alpha = 0.25, lty = 2) +
geom_hline(yintercept = df$kdist[c(65, 170, 247)], alpha = 0.25, lty = 2) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal()
df %>% filter(diff > 0.0025)
df %>% filter(diff > 0.0025 & diff < 0.005)
ggplot(df) +
geom_vline(xintercept = c(76, 170, 247), alpha = 0.25, lty = 2) +
geom_hline(yintercept = df$kdist[c(76, 170, 247)], alpha = 0.25, lty = 2) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal()
df$kdist[c(76, 170, 247)]
library(dbscan)
res = dbscan(songs_num, eps = .390, minPts = 14)
res
res = dbscan(songs_num, eps = .350, minPts = 14)
res
res = dbscan(songs_num, eps = .350, minPts = 28)
res
res = dbscan(songs_num, eps = .310, minPts = 28)
res
res = dbscan(songs_num, eps = .31, minPts = 42)
res
res = dbscan(songs_num, eps = .32, minPts = 42)
res
pca = prcomp(songs_num)
names(pca)
plot(pca)
pca$sdev
pca$rotation
pca$center
pca$scale
pca$x
plot(pca$x)
plot(pca)
names(pca)
sum(pca$sdev)
ggplot(pca$x %>% mutate(classe = res$cluster),
aes(PC1, PC2, color = factor(classe))) +
geom_point()
ggplot(data.frame(pca$x) %>% mutate(classe = res$cluster),
aes(PC1, PC2, color = factor(classe))) +
geom_point()
ggplot(data.frame(pca$x) %>% mutate(classe = res$cluster),
aes(PC1, PC2, color = factor(classe))) +
geom_point(size = 2) +
theme_minimal()
km = kmeans(songs_num, 4)
round(km$centers, 2)
ggplot(data.frame(pca$x) %>% mutate(classe = km$cluster),
aes(PC1, PC2, color = factor(classe))) +
geom_point(size = 2) +
theme_minimal()
PCA(songs_num)
songs
names(songs)
songs_num = songs %>%
select(acousticness, danceability, energy, instrumentalness,
liveness, speechiness, valence, duration_ms,
tempo, loudness) %>%
mutate_all(scale)
d = dist(songs_num)
m = as.matrix(d)
m_tri = apply(m, 2, sort)
v = m_tri[15,]
df = tibble(n = 1:2017, kdist = sort(v, decreasing = TRUE)) %>%
mutate(diff = c(NA, -diff(kdist)))
coeff = 50
ggplot(df) +
geom_vline(xintercept = c(76, 170, 247), alpha = 0.25, lty = 2) +
geom_hline(yintercept = df$kdist[c(76, 170, 247)], alpha = 0.25, lty = 2) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal()
coeff = 5
ggplot(df) +
geom_vline(xintercept = c(76, 170, 247), alpha = 0.25, lty = 2) +
geom_hline(yintercept = df$kdist[c(76, 170, 247)], alpha = 0.25, lty = 2) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal()
coeff = 4
ggplot(df) +
geom_line(aes(n, diff * coeff), color = "red", alpha = 0.5) +
geom_line(aes(n, kdist)) +
scale_y_continuous(name = "k-dist (k = 14)", sec.axis = sec_axis( trans=~. / coeff, name="Différence (en rouge)")) +
theme_minimal()
res = dbscan(songs_num, eps = 3, minPts = 14)
res
res = dbscan(songs_num, eps = 2, minPts = 14)
res
res = dbscan(songs_num, eps = 1.5, minPts = 14)
res
res = dbscan(songs_num, eps = 1.8, minPts = 14)
res
res = dbscan(songs_num, eps = 1.8, minPts = 42)
res
res = dbscan(songs_num, eps = 1.5, minPts = 42)
res
res = dbscan(songs_num, eps = 1.9, minPts = 42)
res
res = dbscan(songs_num, eps = 2.5, minPts = 42)
res
res = dbscan(songs_num, eps = 1.4, minPts = 42)
res
res = dbscan(songs_num, eps = 1.4, minPts = 14)
res
res = dbscan(songs_num, eps = 1.3, minPts = 14)
res
res = dbscan(songs_num, eps = 1.5, minPts = 14)
res
res = dbscan(songs_num, eps = 1.45, minPts = 14)
res
res = dbscan(songs_num, eps = 1.6, minPts = 14)
res
res = dbscan(songs_num, eps = 1.8, minPts = 14)
res
res = dbscan(songs_num, eps = 1.9, minPts = 14)
res
res = dbscan(songs_num, eps = 1.9, minPts = 28)
res
res = dbscan(songs_num, eps = 1.9, minPts = 5)
res
res = dbscan(songs_num, eps = 1.5, minPts = 5)
res
res = dbscan(songs_num, eps = 1.6, minPts = 5)
res
res = dbscan(songs_num, eps = 1.7, minPts = 5)
res
res = dbscan(songs_num, eps = 1.8, minPts = 5)
res
res = dbscan(songs_num, eps = 1.75, minPts = 5)
res
res = dbscan(songs_num, eps = 1.75, minPts = 10)
res
res = dbscan(songs_num, eps = 1.72, minPts = 10)
res
res = dbscan(songs_num, eps = 1.78, minPts = 10)
res
res = dbscan(songs_num, eps = 1.75, minPts = 10)
res
res = dbscan(songs_num, eps = 1.5, minPts = 10)
res
res = dbscan(songs_num, eps = 1.6, minPts = 10)
res
res = dbscan(songs_num, eps = 1.7, minPts = 10)
res
res = dbscan(songs_num, eps = 1.75, minPts = 10)
res
res = dbscan(songs_num, eps = 1.8, minPts = 10)
res
res = dbscan(songs_num, eps = 1.9, minPts = 10)
res
res = dbscan(songs_num, eps = 1.95, minPts = 10)
res
res = dbscan(songs_num, eps = 1.95, minPts = 10)
res
pca = prcomp(songs_num)
plot(pca)
ggplot(data.frame(pca$x) %>% mutate(classe = res$cluster),
aes(PC1, PC2, color = factor(classe))) +
geom_point(size = 2) +
theme_minimal()
PCA(songs_num)
ggplot(data.frame(pca$x) %>% mutate(classe = res$cluster),
aes(PC1, PC2, color = factor(classe))) +
geom_point(size = 2) +
theme_minimal()
songs_num %>%
mutate(classe = res$cluster) %>%
group_by(classe) %>%
summarise_all(mean)
View(songs_num %>%
mutate(classe = res$cluster) %>%
group_by(classe) %>%
summarise_all(mean))
km = kmeans(songs_num, 4)
round(km$centers, 2)
ggplot(data.frame(pca$x) %>% mutate(classe = km$cluster),
aes(PC1, PC2, color = factor(classe))) +
geom_point(size = 2) +
theme_minimal()
res$cluster
res$cluster == 2
which(res$cluster == 2)
songs %>%
;
names(songs)
songs %>%
mutate(classe = res$cluster) %>%
filter(classe == 2) %>%
select(artist, song_title)
View(songs %>%
mutate(classe = res$cluster) %>%
filter(classe == 2) %>%
select(artist, song_title))
songs_num = songs %>%
select(acousticness, danceability, energy, instrumentalness,
liveness, speechiness, valence)
CA(songs_num)
afc = CA(songs_num, graph = FALSE)
res = dbscan(songs_num, eps = .32, minPts = 42)
res
afc$row$coord
ggplot(afc$row$coord %>% mutate(classe = res$cluster),
aes(`Dim 1`, `Dim 2`, color = factor(classe))) +
geom_point()
ggplot(data.frame(afc$row$coord) %>%
mutate(classe = res$cluster),
aes(`Dim 1`, `Dim 2`, color = factor(classe))) +
geom_point()
ggplot(data.frame(afc$row$coord) %>%
mutate(classe = res$cluster),
aes(Dim.1, Dim.2, color = factor(classe))) +
geom_point()
ggplot(data.frame(afc$row$coord) %>%
mutate(classe = res$cluster),
aes(Dim.1, Dim.2, color = factor(classe))) +
geom_point() +
theme_minimal()
mr(list=ls())
rm(list=ls())
