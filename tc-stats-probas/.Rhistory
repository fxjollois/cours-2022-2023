plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
abline(h = 0)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
abline(h = 0)
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 1, at = niveaux, labels = FALSE)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
#abline(h = 0)
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 1, at = niveaux, labels = FALSE)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
abline(v = 600, color = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 1, at = niveaux, labels = FALSE)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 1, at = niveaux, labels = FALSE)
m = matrix(pnorm(seq(0, 2.49, by = 0.01)), ncol = 10, byrow = TRUE)
m = as.data.frame(m)
colnames(m) = paste0("0,0", 0:9)
rownames(m) = sub("\\.", ",", as.character(seq(0, 2.4, by = .1)))
kable(m, digits = 4, escape = F) %>%
kable_styling(font_size = 6) %>%
column_spec(3, bold = T, background = "lightgray") %>%
row_spec(4, bold = T, background = "lightgray")
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 1, at = niveaux, labels = FALSE)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
# abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 1, at = niveaux, labels = FALSE)
axis(side = 1, at = 600, labels = FALSE, col = "blue")
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
# abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 1, at = niveaux, labels = FALSE)
axis(side = 1, at = 600, labels = FALSE, col = "blue", lwd = 5)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
# abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 1, at = niveaux, labels = FALSE)
axis(side = 3, at = 600, labels = FALSE, col = "blue", lwd = 5)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
# abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 3, at = niveaux, labels = FALSE)
axis(side = 3, at = 600, labels = FALSE, col = "blue", lwd = 5)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
# abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 3, at = niveaux, labels = FALSE, outer = TRUE)
axis(side = 3, at = 600, labels = FALSE, col = "blue", lwd = 5)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
# abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 3, at = niveaux, labels = FALSE)
axis(side = 3, at = 600, labels = FALSE, col = "blue", lwd = 5)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
# abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 3, at = niveaux, labels = FALSE, line = 2)
axis(side = 3, at = 600, labels = FALSE, col = "blue", lwd = 5)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
# abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 3, at = niveaux, labels = FALSE, line = 10)
axis(side = 3, at = 600, labels = FALSE, col = "blue", lwd = 5)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
# abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 3, at = niveaux, labels = FALSE, line = 1)
axis(side = 3, at = 600, labels = FALSE, col = "blue", lwd = 5)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
# abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 3, at = niveaux, labels = FALSE, line = 0)
axis(side = 3, at = 600, labels = FALSE, col = "blue", lwd = 5)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
# abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 3, at = niveaux, labels = FALSE, line = -1)
axis(side = 3, at = 600, labels = FALSE, col = "blue", lwd = 5)
plot(NULL, xlim = c(400, 800), ylim = c(-1, 1), axes = FALSE, ylab = "", xlab = "Niveaux mesurés")
# abline(v = 600, col = "blue")
niveaux = c(510,  614, 780,  512, 501, 534, 603, 788, 650)
axis(side = 3, at = niveaux, labels = FALSE)
axis(side = 3, at = 600, labels = FALSE, col = "blue", lwd = 5)
mean(niveaux)
std(niveaux)
sd(niveaux)
t.test(niveaux)
610.2222 * 111.5289 / sqrt(9)
610.2222 - 1.96 * 111.5289 / sqrt(9)
610.2222 - 1.96 * var(niveaux) / sqrt(9)
610.2222 - 1.96 * sd(niveaux) / sqrt(9)
610.2222 - 1.96 * sd(niveaux) / sqrt(9-1)
wilcox.test(niveaux)
610.2222 - 1.96 * sd(niveaux) / sqrt(9)
610.2222 + 1.96 * sd(niveaux) / sqrt(9)
610.2222 + 2.2228 * sd(niveaux) / sqrt(9)
sd(niveaux)
11 - 1.96 * 2 / sqrt(20)
11 + 1.96 * 2 / sqrt(20)
11 + 1.64 * 2 / sqrt(20)
610.2222 + 2.2228 * sd(niveaux) / sqrt(9)
610.2222 + 2.2228 * 111.5289 / sqrt(9)
View(ggplot2::tips)
??tips
View(reshape2::tips)
??sqlite
qnorm(.995)
round(qnorm(.995), 2)
round(qnorm(.9950), 2)
round(qnorm(.9950), 3)
qnorm(.995)
pnorm(.99)
pnorm(.995)
qnorm(.995)
15.1 + c(-1.64, 1.64) * sqrt(4.5**2 / 500)
15.9 + c(-1.64, 1.64) * sqrt(4.4**2 / 500)
x = rnorm(120, 35, 15.08)
mean(x)
sd(x)
sd(x = rnorm(120, 35, 15.08))
sd(x = rnorm(120, 35, 15.08))
sd(x = rnorm(120, 35, 15.08))
sd(x = rnorm(120, 35, 15.08))
sd(x = rnorm(120, 35, 15.08))
sd(x = rnorm(120, 35, 15.08))
sd(x = rnorm(120, 35, 15.08))
sd(x = rnorm(120, 35, 15.08))
sd(x = rnorm(120, 35, 15.08))
sd(x = rnorm(120, 35, 15.08))
t.test(x)
qnorm(.90)
qnorm(.975)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(dplyr)
library(kableExtra)
alpha = 5
u = qnorm(1 - alpha / 2)
u
u = qnorm(1 - alpha / 200)
u
m + c(u, -u) * sqrt(s / n)
u = qnorm(1 - alpha / 200)
m = 35
s = 15.08
m + c(u, -u) * sqrt(s / n)
n = 120
m + c(u, -u) * sqrt(s / n)
round(m + c(u, -u) * sqrt(s / n), 2)
round(m + c(-u, u) * sqrt(s / n), 2)
alpha = 10
u = qnorm(1 - alpha / 200)
round(m + c(-u, u) * sqrt(s / n), 2)
IC_moyenne = function(n, m, s, u, alpha) {
bornes = round(m + c(-u, u) * sqrt(s / n), 2)
cat("Intervalle de confiance à ", alpha, "% : [", paste(bornes, collapse = "; "), "]\n", sep = "")
}
IC_moyenne = function(n, m, s, alpha) {
u = qnorm(1 - alpha / 200)
bornes = round(m + c(-u, u) * sqrt(s / n), 2)
cat("Intervalle de confiance à ", alpha, "% : [", paste(bornes, collapse = "; "), "]\n", sep = "")
}
IC_moyenne(120, 35, 15.08, 5)
IC_moyenne(120, 35, 15.08, 10)
IC_moyenne = function(n, m, s, alpha) {
u = qnorm(1 - alpha / 200)
bornes = round(m + c(-u, u) * sqrt(s / n), 2)
cat("Intervalle de confiance à ", alpha, "% : [", paste(bornes, collapse = "; "), "]\n", sep = "")
}
IC_proportion = function(n, p, alpha) {
u = qnorm(1 - alpha / 200)
bornes = round(p + c(-u, u) * sqrt((p * (1 - p)) / n), 2)
cat("Intervalle de confiance à ", alpha, "% : [", paste(bornes, collapse = "; "), "]\n", sep = "")
}
IC_proportion(300, .15, 5)
IC_proportion(300, .15, 8)
IC_moyenne = function(n, m, s, alpha, digits = 2) {
u = qnorm(1 - alpha / 200)
bornes = round(m + c(-u, u) * sqrt(s / n), digits = digits)
cat("Intervalle de confiance à ", alpha, "% : [", paste(bornes, collapse = "; "), "]\n", sep = "")
}
IC_proportion = function(n, p, alpha, digits = 2) {
u = qnorm(1 - alpha / 200)
bornes = round(p + c(-u, u) * sqrt((p * (1 - p)) / n), digits = digits)
cat("Intervalle de confiance à ", alpha, "% : [", paste(bornes, collapse = "; "), "]\n", sep = "")
}
IC_moyenne(120, 35, 15.08, 5)
IC_moyenne(120, 35, 15.08, 10)
IC_proportion(300, .15, 5)
IC_proportion(300, .15, 8, digits = 3)
IC_moyenne(49, 3.55, 0.32, 90)
IC_moyenne(49, 3.55, 0.32, 95)
IC_moyenne(49, 3.55, 0.32, 90)
IC_moyenne(49, 3.55, 0.32, 95)
IC_moyenne(49, 3.55, 0.32, 99)
IC_moyenne(49, 3.55, 0.32, 90, 3)
IC_moyenne(49, 3.55, 0.32, 90, digits = 3)
IC_moyenne(49, 3.55, 0.32, 95, digits = 3)
IC_moyenne(49, 3.55, 0.32, 99, digits = 3)
IC_moyenne(49, 3.55, 0.32, 90, digits = 3)
IC_moyenne(49, 3.55, 0.32, 95, digits = 3)
IC_moyenne(49, 3.55, 0.32, 99, digits = 3)
IC_moyenne(49, 3.55, 0.32, 90, digits = 3)
IC_moyenne(49, 3.55, 0.32, 95, digits = 3)
IC_moyenne(49, 3.55, 0.32, 99, digits = 3)
IC_moyenne(49, 3.55, 0.62, 90, digits = 3)
IC_moyenne(49, 3.55, 0.62, 95, digits = 3)
IC_moyenne(49, 3.55, 0.62, 99, digits = 3)
cat("Proportion : ", 39/50*100, "%\n")
IC_moyenne(49, 3.55, 0.32, 10, digits = 3)
IC_moyenne(49, 3.55, 0.32, 5, digits = 3)
IC_moyenne(49, 3.55, 0.32, 1, digits = 3)
IC_moyenne(49, 3.55, 0.32, 10)
IC_moyenne(49, 3.55, 0.32, 5)
IC_moyenne(49, 3.55, 0.32, 1)
IC_proportion(50, .78, 5)
20*1.96/4
20*1.96**2/4
20**2*1.96**2/4
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(dplyr)
library(kableExtra)
IC_moyenne = function(n, m, s, alpha, digits = 2, msg = "") {
u = qnorm(1 - alpha / 200)
bornes = round(m + c(-u, u) * sqrt(s / n), digits = digits)
cat(msg, "Intervalle de confiance à ", alpha, "% : [", paste(bornes, collapse = "; "), "]\n", sep = "")
}
IC_proportion = function(n, p, alpha, digits = 2, msg = "") {
u = qnorm(1 - alpha / 200)
bornes = round(p + c(-u, u) * sqrt((p * (1 - p)) / n), digits = digits)
cat(msg, "Intervalle de confiance à ", alpha, "% : [", paste(bornes, collapse = "; "), "]\n", sep = "")
}
IC_moyenne(500, 15.1, 4.5**2, 90, msg = "Circuit 1 : ")
IC_moyenne(500, 15.9, 4.4**2, 90, msg = "Circuit 2 : ")
IC_moyenne(500, 15.1, 4.5**2, 90, msg = "Circuit 1 -> ")
IC_moyenne(500, 15.9, 4.4**2, 90, msg = "Circuit 2 -> ")
IC_moyenne(500, 15.1, 4.5**2, 95, msg = "Circuit 1 -> ")
IC_moyenne(500, 15.9, 4.4**2, 95, msg = "Circuit 2 -> ")
IC_moyenne(500, 15.1, 4.5**2, 10, msg = "Circuit 1 -> ")
IC_moyenne(500, 15.9, 4.4**2, 10, msg = "Circuit 2 -> ")
IC_moyenne(500, 15.1, 4.5**2, 5, msg = "Circuit 1 -> ")
IC_moyenne(500, 15.9, 4.4**2, 5, msg = "Circuit 2 -> ")
IC_moyenne(500, 15.1, 4.5**2, 5, msg = "Circuit 1 -> ")
IC_moyenne(500, 15.9, 4.4**2, 5, msg = "Circuit 2 -> ")
IC_moyenne(500, 15.8, 4.4**2, 5, msg = "Circuit 2 -> ")
IC_moyenne(500, 15.1, 4.5**2, 10, msg = "Circuit 1 -> ")
IC_moyenne(500, 15.8, 4.4**2, 10, msg = "Circuit 2 -> ")
IC_moyenne(500, 15.1, 4.5**2, 5, msg = "Circuit 1 -> ")
IC_moyenne(500, 15.8, 4.4**2, 5, msg = "Circuit 2 -> ")
IC_moyenne(500, 15.1, 4.5**2, 10, msg = "Circuit 1 -> ")
IC_moyenne(500, 15.8, 4.4**2, 10, msg = "Circuit 2 -> ")
IC_moyenne(500, 15.1, 4.5**2, 5, msg = "Circuit 1 -> ")
IC_moyenne(500, 15.8, 4.4**2, 5, msg = "Circuit 2 -> ")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(dplyr)
library(kableExtra)
v = c(0.001, 0.01, 0.025, 0.05, 0.10)
qnorm(v)
dnorm(v)
pnorm(v)
pnorm(1 - v)
qnorm(1 - v)
v = c(0.001, 0.005, 0.01, 0.025, 0.05, 0.10)
qnorm(1 - v)
data.frame(u = v, p = qnorm(1 - v))
data.frame(u = 1 - v, p = qnorm(1 - v))
data.frame(`P(X < u)` = 1 - v, p = qnorm(1 - v))
tibble(`P(X < u)` = 1 - v, p = qnorm(1 - v))
tibble(`P(X < u)` = 1 - v, `u` = qnorm(1 - v))
knitr::kable(tibble(`P(X < u)` = 1 - v, `u` = qnorm(1 - v)))
knitr::kable(tibble(`P(X < u)` = 1 - v, `u` = qnorm(1 - v)), digits = 2) %>%
kable_styling()
knitr::kable(tibble(`P(X < u)` = 1 - v, `u` = qnorm(1 - v)), digits = 4) %>%
kable_styling()
knitr::kable(tibble(`P(X < u)` = 1 - v, `u` = qnorm(1 - v))) %>%
kable_styling()
library(kableExtra)
??format
?column_spec()
knitr::kable(tibble(`P(X < u)` = 1 - v, `u` = qnorm(1 - v))) %>%
kable_styling()
v = c(0.001, 0.005, 0.01, 0.025, 0.05, 0.10)
v = c(v, 1 - v)
knitr::kable(tibble(`P(X < u)` = 1 - v, `u` = qnorm(1 - v))) %>%
kable_styling()
v = c(0.001, 0.005, 0.01, 0.025, 0.05, 0.10)
v = c(1 - v, v)
knitr::kable(tibble(`P(X < u)` = 1 - v, `u` = qnorm(1 - v))) %>%
kable_styling()
v = c(0.001, 0.005, 0.01, 0.025, 0.05, 0.10)
knitr::kable(tibble(`P(X < u)` = 1 - v, `u` = qnorm(1 - v))) %>%
kable_styling()
IC_moyenne(200, 807, 20, 5)
IC_moyenne(200, 807, 20, 95)
IC_moyenne(200, 807, 20, 5)
IC_moyenne(20, 807, 20, 5)
IC_moyenne(200, 807, 20, 5)
IC_moyenne
IC_moyenne(200, 807, 20*2, 5)
IC_moyenne(200, 807, 20**2, 5)
IC_moyenne(200, 805, 16*2, 5)
IC_moyenne(200, 802, 20, 5)
IC_moyenne(200, 802, 100, 5)
IC_moyenne(200, 802, 100, 10)
IC_moyenne(200, 801, 100, 10)
IC_moyenne(200, 807, 20, 5)
IC_moyenne(200, 805, 16, 5)
300+150+90
240+120+100
IC_moyenne(33, 40.85, 6.60, 5)
IC_moyenne(33, 42.88, 7.52, 5)
IC_moyenne(33, 40.85, 6.60**2, 5)
IC_moyenne(33, 42.88, 7.52**2, 5)
IC_moyenne(33, 2.03, 4.41**2, 5)
IC_proportion(200, .45, 5)
IC_proportion(200, .55, 5)
IC_proportion(200, .1, 5)
IC_proportion(200, .06, 5)
IC_proportion(200, .1, 5)
IC_proportion(200, 9/200, 5)
?glm
setwd("~/Documents/GitHub/cours-2021-2022/tc-stats-probas")
library(readr)
paris = read_csv("../../../../Nextcloud/Année 2021-2022/Préparation cours/Cherbourg - TC - 2A - Stat-proba/listings-paris.csv")
View(paris)
lyon = read_csv("../../../../Nextcloud/Année 2021-2022/Préparation cours/Cherbourg - TC - 2A - Stat-proba/listings-lyon")
lyon = read_csv("../../../../Nextcloud/Année 2021-2022/Préparation cours/Cherbourg - TC - 2A - Stat-proba/listings-lyon.csv")
View(lyon)
df=paris
df$listing_url = NULL
df$scrape_id = NULL
df$last_scraped = NULL
df$picture_url = NULL
df$host_about = NULL
df$host_acceptance_rate = NULL
df$host_has_profile_pic = NULL
df$host_id = NULL
df$host_identity_verified = NULL
library(dplyr)
select(paris, -starts_with("host"))
df = paris
df = select(df, -starts_with("host"))
View (df)
df = paris %>%
select(-listing_url, scrape_id, last_scraped, name, description, picture_url, neighbourhood) %>%
select(-starts_with("host"))
df = paris %>%
select(-listing_url, scrape_id, last_scraped, name, description, picture_url, neighbourhood) %>%
select(-starts_with("host"))
df = paris %>%
select(-listing_url, -scrape_id, -last_scraped, -name, -description, -picture_url, -neighbourhood) %>%
select(-starts_with("host"))
df = paris %>%
select(-listing_url, -scrape_id, -last_scraped, -name, -description,
-picture_url, -neighbourhood, -neighborhood_overview,
-neighbourhood_cleansed, -neighbourhood_group_cleansed) %>%
select(-starts_with("host"))
df = paris %>%
select(-listing_url, -scrape_id, -last_scraped, -name, -description,
-picture_url, -neighbourhood, -neighborhood_overview,
-neighbourhood_cleansed, -neighbourhood_group_cleansed,
-latitude, -longitude) %>%
select(-starts_with("host"))
clean_df = function(df) {
df = df %>%
select(-listing_url, -scrape_id, -last_scraped, -name, -description,
-picture_url, -neighbourhood, -neighborhood_overview,
-neighbourhood_cleansed, -neighbourhood_group_cleansed,
-latitude, -longitude) %>%
select(-starts_with("host"))
return (df)
}
paris = clean_df(paris)
lyon = clean_df(lyon)
library(writexl)
paris = read_csv("../../../../Nextcloud/Année 2021-2022/Préparation cours/Cherbourg - TC - 2A - Stat-proba/listings-paris.csv")
lyon = read_csv("../../../../Nextcloud/Année 2021-2022/Préparation cours/Cherbourg - TC - 2A - Stat-proba/listings-lyon.csv")
clean_df = function(df) {
df = df %>%
select(-listing_url, -scrape_id, -last_scraped, -name, -description,
-picture_url, -neighbourhood, -neighborhood_overview,
-neighbourhood_cleansed, -neighbourhood_group_cleansed,
-latitude, -longitude) %>%
select(-starts_with("host"))
return (df[sample(1:nrow(df), size = 500)])
}
paris = clean_df(paris)
clean_df = function(df) {
df = df %>%
select(-listing_url, -scrape_id, -last_scraped, -name, -description,
-picture_url, -neighbourhood, -neighborhood_overview,
-neighbourhood_cleansed, -neighbourhood_group_cleansed,
-latitude, -longitude) %>%
select(-starts_with("host")) %>%
slice(sample(1:nrow(df), size = 500))
return (df)
}
paris = clean_df(paris)
lyon = clean_df(lyon)
library(writexl)
write_xlsx(paris, "tp2-paris.xlsx")
write_xlsx(lyon, "tp3-lyon.xlsx")
paris$amenities
strsplit(paris$amenities, "[],")
strsplit(paris$amenities, "[,]")
library(jsonlite)
fromJSON(paris$amenities[[1]])
sapply(paris$amenities, fromJSON)
amenities = sapply(paris$amenities, fromJSON)
sapply(amenities, function(e) { return ("Wifi" %in% e)})
sapply(amenities, function(e) { return ("Wifi" %in% e)}, USE.NAMES = FALSE)
names(amenities)
amenities = sapply(paris$amenities, fromJSON, USE.NAMES = FALSE)
names(amenities)
sapply(amenities, function(e) { return ("Wifi" %in% e)})
factor(sapply(amenities, function(e) { return ("Wifi" %in% e)}), labels = ("Oui", "Non")
factor(sapply(amenities, function(e) { return ("Wifi" %in% e)}), labels = c("Oui", "Non")
)
amenities
unique(unlist(amenities))
paris = read_csv("../../../../Nextcloud/Année 2021-2022/Préparation cours/Cherbourg - TC - 2A - Stat-proba/listings-paris.csv")
lyon = read_csv("../../../../Nextcloud/Année 2021-2022/Préparation cours/Cherbourg - TC - 2A - Stat-proba/listings-lyon.csv")
clean_df = function(df) {
df = df %>%
select(-listing_url, -scrape_id, -last_scraped, -name, -description,
-picture_url, -neighbourhood, -neighborhood_overview,
-neighbourhood_cleansed, -neighbourhood_group_cleansed,
-latitude, -longitude) %>%
select(-starts_with("host")) %>%
slice(sample(1:nrow(df), size = 500))
amenities = sapply(df$amenities, fromJSON, USE.NAMES = FALSE)
df$Wifi = factor(sapply(amenities, function(e) { return ("Wifi" %in% e)}), lables = c("Oui", "Non"))
df$TV = factor(sapply(amenities, function(e) { return ("TV" %in% e)}), lables = c("Oui", "Non"))
return (df)
}
paris = clean_df(paris)
lyon = clean_df(lyon)
clean_df = function(df) {
df = df %>%
select(-listing_url, -scrape_id, -last_scraped, -name, -description,
-picture_url, -neighbourhood, -neighborhood_overview,
-neighbourhood_cleansed, -neighbourhood_group_cleansed,
-latitude, -longitude) %>%
select(-starts_with("host")) %>%
slice(sample(1:nrow(df), size = 500))
amenities = sapply(df$amenities, fromJSON, USE.NAMES = FALSE)
df$Wifi = factor(sapply(amenities, function(e) { return ("Wifi" %in% e)}), labels = c("Oui", "Non"))
df$TV = factor(sapply(amenities, function(e) { return ("TV" %in% e)}), labels = c("Oui", "Non"))
return (df)
}
paris = clean_df(paris)
lyon = clean_df(lyon)
write_csv(paris, "tp2-paris.csv")
write_csv(lyon, "tp2-lyon.csv")
paris$price
gsub(paris$price, "$", "")
gsub("$", "", paris$price)
sapply(paris$price, gsub, pattern = "$", replacement = "")
sapply(paris$price, gsub, pattern = "$", replacement = "", USE.NAMES = FALSE)
sapply(paris$price, gsub, pattern = "\$", replacement = "", USE.NAMES = FALSE)
sapply(paris$price, gsub, pattern = "\\$", replacement = "", USE.NAMES = FALSE)
gsub("\\$", "", paris$price)
as.numeric(gsub("\\$", "", paris$price))
gsub("\\.", "", gsub("\\$", "", paris$price))
gsub("\\,", "", gsub("\\$", "", paris$price))
as.numeric(gsub("\\,", "", gsub("\\$", "", paris$price)))
library(readr)
library(dplyr)
paris = read_csv("../../../../Nextcloud/Année 2021-2022/Préparation cours/Cherbourg - TC - 2A - Stat-proba/listings-paris.csv")
lyon = read_csv("../../../../Nextcloud/Année 2021-2022/Préparation cours/Cherbourg - TC - 2A - Stat-proba/listings-lyon.csv")
clean_df = function(df) {
amenities = sapply(df$amenities, fromJSON, USE.NAMES = FALSE)
df$Wifi = factor(sapply(amenities, function(e) { return ("Wifi" %in% e)}), labels = c("Oui", "Non"))
df$TV = factor(sapply(amenities, function(e) { return ("TV" %in% e)}), labels = c("Oui", "Non"))
df$price = as.numeric(gsub("\\,", "", gsub("\\$", "", df$price)))
df = df %>%
select(id, room_type, price, review_scores_rating, Wifi, TV) %>%
slice(sample(1:nrow(df), size = 500))
return (df)
}
paris = clean_df(paris)
lyon = clean_df(lyon)
write_csv(paris, "tp2-paris.csv")
write_csv(lyon, "tp2-lyon.csv")
write.csv(paris, "tp2-paris.csv", dec = ",")
write.table(paris, "tp2-paris.csv", sep = ";", dec = ",")
View(paris)
write.table(paris, "tp2-paris.csv", sep = ";", dec = ",", row.names = FALSE)
library(readr)
library(dplyr)
paris = read_csv("../../../../Nextcloud/Année 2021-2022/Préparation cours/Cherbourg - TC - 2A - Stat-proba/listings-paris.csv")
lyon = read_csv("../../../../Nextcloud/Année 2021-2022/Préparation cours/Cherbourg - TC - 2A - Stat-proba/listings-lyon.csv")
clean_df = function(df) {
amenities = sapply(df$amenities, fromJSON, USE.NAMES = FALSE)
df$Wifi = factor(sapply(amenities, function(e) { return ("Wifi" %in% e)}), labels = c("Oui", "Non"))
df$TV = factor(sapply(amenities, function(e) { return ("TV" %in% e)}), labels = c("Oui", "Non"))
df$price = as.numeric(gsub("\\,", "", gsub("\\$", "", df$price)))
df = df %>%
select(room_type, price, review_scores_rating, Wifi, TV) %>%
slice(sample(1:nrow(df), size = 500))
return (df)
}
paris = clean_df(paris)
lyon = clean_df(lyon)
write.table(paris, "tp2-paris.csv", sep = ";", dec = ",", row.names = FALSE, na = "")
write.table(lyon, "tp2-lyon.csv", sep = ";", dec = ",", row.names = FALSE, na = "")
